{"version":3,"file":"canvas-extract.js","sources":["../../src/CanvasExtract.ts"],"sourcesContent":["import { RenderTexture } from '@pixi/core';\nimport { CanvasRenderTarget } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\nimport { CanvasRenderer } from '@pixi/canvas-renderer';\nimport type { DisplayObject } from '@pixi/display';\nimport type { BaseRenderTexture } from '@pixi/core';\n\nconst TEMP_RECT = new Rectangle();\n\n/**\n * The extract manager provides functionality to export content from the renderers.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.extract`\n *\n * @class\n * @memberof PIXI\n */\nexport class CanvasExtract\n{\n    /** A reference to the current renderer */\n    public renderer: CanvasRenderer;\n\n    /**\n     * @param renderer - A reference to the current renderer\n     */\n    constructor(renderer: CanvasRenderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     *\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return HTML Image of the target\n     */\n    public image(target?: DisplayObject|RenderTexture, format?: string, quality?: number): HTMLImageElement\n    {\n        const image = new Image();\n\n        image.src = this.base64(target, format, quality);\n\n        return image;\n    }\n\n    /**\n     * Will return a base64 encoded string of this target. It works by calling\n     *  `CanvasExtract.getCanvas` and then running toDataURL on that.\n     *\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return A base64 encoded string of the texture.\n     */\n    public base64(target?: DisplayObject|RenderTexture, format?: string, quality?: number): string\n    {\n        return this.canvas(target).toDataURL(format, quality);\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     *\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return A Canvas element with the texture rendered on.\n     */\n    public canvas(target?: DisplayObject|RenderTexture): HTMLCanvasElement\n    {\n        const renderer = this.renderer;\n        let context;\n        let resolution;\n        let frame;\n        let renderTexture;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = renderer.generateTexture(target);\n            }\n        }\n\n        if (renderTexture)\n        {\n            context = (renderTexture.baseTexture as BaseRenderTexture)._canvasRenderTarget.context;\n            resolution = (renderTexture.baseTexture as BaseRenderTexture)._canvasRenderTarget.resolution;\n            frame = renderTexture.frame;\n        }\n        else\n        {\n            context = renderer.rootContext;\n            resolution = renderer.resolution;\n            frame = TEMP_RECT;\n            frame.width = this.renderer.width;\n            frame.height = this.renderer.height;\n        }\n\n        const width = Math.floor((frame.width * resolution) + 1e-4);\n        const height = Math.floor((frame.height * resolution) + 1e-4);\n\n        const canvasBuffer = new CanvasRenderTarget(width, height, 1);\n        const canvasData = context.getImageData(frame.x * resolution, frame.y * resolution, width, height);\n\n        canvasBuffer.context.putImageData(canvasData, 0, 0);\n\n        // send the canvas back..\n        return canvasBuffer.canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     *\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return One-dimensional array containing the pixel data of the entire texture\n     */\n    public pixels(target?: DisplayObject|RenderTexture): Uint8ClampedArray\n    {\n        const renderer = this.renderer;\n        let context;\n        let resolution;\n        let frame;\n        let renderTexture;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = renderer.generateTexture(target);\n            }\n        }\n\n        if (renderTexture)\n        {\n            context = (renderTexture.baseTexture as BaseRenderTexture)._canvasRenderTarget.context;\n            resolution = (renderTexture.baseTexture as BaseRenderTexture)._canvasRenderTarget.resolution;\n            frame = renderTexture.frame;\n        }\n        else\n        {\n            context = renderer.rootContext;\n            resolution = renderer.resolution;\n            frame = TEMP_RECT;\n            frame.width = renderer.width;\n            frame.height = renderer.height;\n        }\n\n        const x = frame.x * resolution;\n        const y = frame.y * resolution;\n        const width = frame.width * resolution;\n        const height = frame.height * resolution;\n\n        return context.getImageData(x, y, width, height).data;\n    }\n\n    /** Destroys the extract */\n    public destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n"],"names":["Rectangle","RenderTexture","CanvasRenderTarget"],"mappings":"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"}