{"version":3,"file":"canvas-sprite.min.js","sources":["../../src/CanvasSpriteRenderer.ts","../../src/Sprite.ts"],"sourcesContent":["import { SCALE_MODES, BLEND_MODES } from '@pixi/constants';\nimport { Matrix, groupD8 } from '@pixi/math';\nimport { canvasUtils } from '@pixi/canvas-renderer';\nimport type { CanvasRenderer } from '@pixi/canvas-renderer';\nimport type { Sprite } from '@pixi/sprite';\n\nconst canvasRenderWorldTransform = new Matrix();\n\n/**\n * Types that can be passed to drawImage\n * @typedef {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap} ICanvasImageSource\n * @memberof PIXI\n */\n\n/*\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they now\n * share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's CanvasSpriteRenderer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/CanvasSpriteRenderer.java\n */\n\n/**\n * Renderer dedicated to drawing and batching sprites.\n *\n * @class\n * @protected\n * @memberof PIXI\n */\nexport class CanvasSpriteRenderer\n{\n    /** A reference to the current renderer */\n    protected renderer: CanvasRenderer;\n\n    /** @param renderer - A reference to the current renderer */\n    constructor(renderer: CanvasRenderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Renders the sprite object.\n     *\n     * @param sprite - the sprite to render when using this spritebatch\n     */\n    render(sprite: Sprite): void\n    {\n        const texture = sprite._texture;\n        const renderer = this.renderer;\n        const context = renderer.context;\n\n        if (!texture.valid)\n        {\n            return;\n        }\n\n        const width = texture._frame.width;\n        const height = texture._frame.height;\n\n        let wt = sprite.transform.worldTransform;\n        let dx = 0;\n        let dy = 0;\n\n        const source = texture.baseTexture.getDrawableSource();\n\n        if (texture.orig.width <= 0 || texture.orig.height <= 0 || !texture.valid || !source)\n        {\n            return;\n        }\n\n        renderer.setBlendMode(sprite.blendMode, true);\n\n        renderer.context.globalAlpha = sprite.worldAlpha;\n\n        // If smoothingEnabled is supported and we need to change the smoothing property for sprite texture\n        const smoothingEnabled = texture.baseTexture.scaleMode === SCALE_MODES.LINEAR;\n\n        if (renderer.smoothProperty\n            && renderer.context[renderer.smoothProperty] !== smoothingEnabled)\n        {\n            context[renderer.smoothProperty] = smoothingEnabled;\n        }\n\n        if (texture.trim)\n        {\n            dx = (texture.trim.width / 2) + texture.trim.x - (sprite.anchor.x * texture.orig.width);\n            dy = (texture.trim.height / 2) + texture.trim.y - (sprite.anchor.y * texture.orig.height);\n        }\n        else\n        {\n            dx = (0.5 - sprite.anchor.x) * texture.orig.width;\n            dy = (0.5 - sprite.anchor.y) * texture.orig.height;\n        }\n\n        if (texture.rotate)\n        {\n            wt.copyTo(canvasRenderWorldTransform);\n            wt = canvasRenderWorldTransform;\n            groupD8.matrixAppendRotationInv(wt, texture.rotate, dx, dy);\n            // the anchor has already been applied above, so lets set it to zero\n            dx = 0;\n            dy = 0;\n        }\n\n        dx -= width / 2;\n        dy -= height / 2;\n\n        renderer.setContextTransform(wt, sprite.roundPixels, 1);\n        // Allow for pixel rounding\n        if (sprite.roundPixels)\n        {\n            dx = dx | 0;\n            dy = dy | 0;\n        }\n\n        const resolution = texture.baseTexture.resolution;\n        const outerBlend = renderer._outerBlend;\n\n        if (outerBlend)\n        {\n            context.save();\n            context.beginPath();\n            context.rect(\n                dx * renderer.resolution,\n                dy * renderer.resolution,\n                width * renderer.resolution,\n                height * renderer.resolution\n            );\n            context.clip();\n        }\n\n        if (sprite.tint !== 0xFFFFFF)\n        {\n            if (sprite._cachedTint !== sprite.tint || sprite._tintedCanvas.tintId !== sprite._texture._updateID)\n            {\n                sprite._cachedTint = sprite.tint;\n\n                // TODO clean up caching - how to clean up the caches?\n                sprite._tintedCanvas = canvasUtils.getTintedCanvas(sprite, sprite.tint);\n            }\n\n            context.drawImage(\n                sprite._tintedCanvas,\n                0,\n                0,\n                Math.floor(width * resolution),\n                Math.floor(height * resolution),\n                Math.floor(dx * renderer.resolution),\n                Math.floor(dy * renderer.resolution),\n                Math.floor(width * renderer.resolution),\n                Math.floor(height * renderer.resolution)\n            );\n        }\n        else\n        {\n            context.drawImage(\n                source,\n                texture._frame.x * resolution,\n                texture._frame.y * resolution,\n                Math.floor(width * resolution),\n                Math.floor(height * resolution),\n                Math.floor(dx * renderer.resolution),\n                Math.floor(dy * renderer.resolution),\n                Math.floor(width * renderer.resolution),\n                Math.floor(height * renderer.resolution)\n            );\n        }\n\n        if (outerBlend)\n        {\n            context.restore();\n        }\n        // just in case, leaking outer blend here will be catastrophic!\n        renderer.setBlendMode(BLEND_MODES.NORMAL);\n    }\n\n    /** destroy the sprite object */\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n","import { Sprite } from '@pixi/sprite';\nimport type { CanvasRenderer } from '@pixi/canvas-renderer';\n\n/**\n * Cached tinted texture.\n * @memberof PIXI.Sprite#\n * @member {HTMLCanvasElement} _tintedCanvas\n * @protected\n */\nSprite.prototype._tintedCanvas = null;\n\n/**\n* Renders the object using the Canvas renderer\n*\n* @private\n* @method _renderCanvas\n* @memberof PIXI.Sprite#\n* @param {PIXI.CanvasRenderer} renderer - The renderer\n*/\nSprite.prototype._renderCanvas = function _renderCanvas(renderer: CanvasRenderer): void\n{\n    renderer.plugins.sprite.render(this);\n};\n"],"names":["canvasRenderWorldTransform","Matrix","CanvasSpriteRenderer","renderer","this","prototype","render","sprite","texture","_texture","context","valid","width","_frame","height","wt","transform","worldTransform","dx","dy","source","baseTexture","getDrawableSource","orig","setBlendMode","blendMode","globalAlpha","worldAlpha","smoothingEnabled","scaleMode","SCALE_MODES","LINEAR","smoothProperty","trim","x","anchor","y","rotate","copyTo","groupD8","matrixAppendRotationInv","setContextTransform","roundPixels","resolution","outerBlend","_outerBlend","save","beginPath","rect","clip","tint","_cachedTint","_tintedCanvas","tintId","_updateID","canvasUtils","getTintedCanvas","drawImage","Math","floor","restore","BLEND_MODES","NORMAL","destroy","Sprite","_renderCanvas","plugins"],"mappings":"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"}